version: "3"

services:
  frontend:
    build:
      context: ./frontend
      target: ${APP_ENVIRONMENT} # Specify which stage of the dockerfile to use
    restart: always
    container_name: frontend
    environment:
      PUBLIC_ENV: prod
    env_file:
      - .env
    ports:
      - 3000:3000
      - 24678:24678
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/static:/app/static
      - ./frontend/tests:/app/tests
      - ./frontend/playwright.config.ts:/app/playwright.config.ts
      - ./frontend/tailwind.config.cjs:/app/tailwind.config.cjs
      - ./frontend/postcss.config.cjs:/app/postcss.config.cjs
      - /app/node_modules
    depends_on:
      - traefik
    networks:
      - traefik
      - streamchaser
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-web.rule=Host(`${HOST_NAME}`)"
      - "traefik.http.routers.frontend-web.middlewares=${SECURE_REDIRECT}"
      - "traefik.http.routers.frontend-secured.rule=Host(`${HOST_NAME}`)"
      - "traefik.http.routers.frontend-secured.tls.certresolver=mytlschallenge"
      - "traefik.docker.network=traefik"

  backend:
    build:
      context: ./backend
      target: ${APP_ENVIRONMENT} # Which stage to build
    restart: always
    container_name: backend
    env_file:
      - .env
    volumes:
      - ./backend/:/app
    depends_on:
      - redis
      - search
      - traefik
    networks:
      - traefik
      - streamchaser
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-web.rule=Host(`api.${HOST_NAME}`)"
      - "traefik.http.routers.backend-web.middlewares=${SECURE_REDIRECT}"
      - "traefik.http.routers.backend-secured.rule=Host(`api.${HOST_NAME}`)"
      - "traefik.http.routers.backend-secured.tls.certresolver=mytlschallenge"
      - "traefik.docker.network=traefik"

  internal:
    build:
      context: ./internal
      target: ${APP_ENVIRONMENT} # Specify which stage of the dockerfile to use
    container_name: internal
    restart: always
    ports:
      - 8888:8888
    networks:
      - traefik
      - streamchaser
    env_file:
      - .env
    volumes:
      - ./internal:/app
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.internal-web.rule=Host(`internal.${HOST_NAME}`)"
      - "traefik.http.routers.internal-secured.rule=Host(`internal.${HOST_NAME}`)"
      - "traefik.http.routers.internal-secured.tls.certresolver=mytlschallenge"
      - "traefik.docker.network=traefik"

  search:
    image: getmeili/meilisearch:v1.1.0
    restart: always
    container_name: search
    environment:
      - MEILI_HTTP_PAYLOAD_SIZE_LIMIT=1048576000 # 1 gigabyte
    volumes:
      - meili:/data.ms
    ports:
      - 7700:7700
    networks:
      - streamchaser

  redis:
    image: redis:6.2.6
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - cache:/data
    networks:
      - streamchaser

  edgedb:
    container_name: edgedb
    image: edgedb/edgedb:2.7
    environment:
      EDGEDB_SERVER_TLS_CERT_MODE: generate_self_signed
      EDGEDB_SERVER_ADMIN_UI: enabled
      EDGEDB_SERVER_PASSWORD: secret # TODO: Yea... Don't let this get to prod
    volumes:
      - ./dbschema:/dbschema
      - edgedb-data:/var/lib/edgedb/data
    ports:
      - 5656:5656
    networks:
      - streamchaser

  traefik:
    image: traefik:v2.5
    restart: always
    container_name: traefik
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    command:
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=true
      - --api.dashboard=true
      - --api.debug=false
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=ERROR
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/dynamic.yml
      - --providers.docker.network=web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80
      - --entrypoints.web-secured.address=:443
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true
      - --certificatesresolvers.mytlschallenge.acme.email=theafkdeveloper@gmail.com
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dynamic.yml:/dynamic.yml
    networks:
      - traefik
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`monitor.${HOST_NAME}`)"
      - "traefik.http.routers.api.service=api@internal"

networks:
  traefik:
    external: true
  streamchaser:
    external: false

volumes:
  meili:
  edgedb-data:
  node_modules:
  cache:
    driver: local

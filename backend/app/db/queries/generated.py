# AUTOGENERATED FROM:
#     'backend/app/db/queries/insert_countries.edgeql'
#     'backend/app/db/queries/insert_genres.edgeql'
#     'backend/app/db/queries/insert_media.edgeql'
#     'backend/app/db/queries/insert_user.edgeql'
#     'backend/app/db/queries/select_countries.edgeql'
#     'backend/app/db/queries/select_genres.edgeql'
#     'backend/app/db/queries/select_user_watch_list.edgeql'
#     'backend/app/db/queries/update_user_watch_list_add.edgeql'
#     'backend/app/db/queries/update_user_watch_list_remove.edgeql'
# WITH:
#     $ edgedb-py -P 5656 --tls-security insecure --user edgedb --password secret --file app/db/queries/generated.py
from __future__ import annotations

import dataclasses
import uuid

import edgedb


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class InsertCountriesResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class InsertGenresResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class InsertMediaResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class InsertUserResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class SelectCountriesResult(NoPydanticValidation):
    id: uuid.UUID
    label: str
    value: str


@dataclasses.dataclass
class SelectGenresResult(NoPydanticValidation):
    id: uuid.UUID
    label: str
    value: str


@dataclasses.dataclass
class SelectUserWatchListResult(NoPydanticValidation):
    id: uuid.UUID
    watch_list: list[SelectUserWatchListResultWatchListItem]


@dataclasses.dataclass
class SelectUserWatchListResultWatchListItem(NoPydanticValidation):
    id: uuid.UUID
    streamchaser_id: str


async def insert_countries(
    executor: edgedb.AsyncIOExecutor,
    *,
    data: str,
) -> list[InsertCountriesResult]:
    return await executor.query(
        """\
        with
          raw_data := <json>$data,
        for item in json_array_unpack(raw_data) union (
          insert Country { label := <str>item['label'], value := <str>item['value'] }
          unless conflict
        )\
        """,
        data=data,
    )


async def insert_genres(
    executor: edgedb.AsyncIOExecutor,
    *,
    data: str,
) -> list[InsertGenresResult]:
    return await executor.query(
        """\
        with
          raw_data := <json>$data,
        for item in json_array_unpack(raw_data) union (
          insert Genre { label := <str>item['label'], value := <str>item['value'] }
          unless conflict
        )\
        """,
        data=data,
    )


async def insert_media(
    executor: edgedb.AsyncIOExecutor,
    *,
    streamchaser_id: str,
) -> InsertMediaResult | None:
    return await executor.query_single(
        """\
        insert Media {
          streamchaser_id := <str>$streamchaser_id
        }
        unless conflict;\
        """,
        streamchaser_id=streamchaser_id,
    )


async def insert_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
    name: str,
) -> InsertUserResult | None:
    return await executor.query_single(
        """\
        insert User {
          email := <str>$email,
          name := <str>$name
        }
        unless conflict;\
        """,
        email=email,
        name=name,
    )


async def select_countries(
    executor: edgedb.AsyncIOExecutor,
) -> list[SelectCountriesResult]:
    return await executor.query(
        """\
        select Country {
          id,
          label,
          value
        }\
        """,
    )


async def select_genres(
    executor: edgedb.AsyncIOExecutor,
) -> list[SelectGenresResult]:
    return await executor.query(
        """\
        select Genre {
          id,
          label,
          value
        }\
        """,
    )


async def select_user_watch_list(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
) -> SelectUserWatchListResult | None:
    return await executor.query_single(
        """\
        select User {
          watch_list: {
            id,
            streamchaser_id
          }
        }
        filter .email = <str>$email\
        """,
        email=email,
    )


async def update_user_watch_list_add(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
    streamchaser_id: str,
) -> InsertUserResult | None:
    return await executor.query_single(
        """\
        update User
        filter .email = <str>$email
        set {
          watch_list += (
            insert Media { streamchaser_id := <str>$streamchaser_id }
            unless conflict on .streamchaser_id
            else (
              select Media filter .streamchaser_id = <str>$streamchaser_id
            )
          )
        };\
        """,
        email=email,
        streamchaser_id=streamchaser_id,
    )


async def update_user_watch_list_remove(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
    streamchaser_id: str,
) -> InsertUserResult | None:
    return await executor.query_single(
        """\
        update User
        filter .email = <str>$email
        set {
          watch_list -= (
            select Media filter .streamchaser_id = <str>$streamchaser_id
          )
        };\
        """,
        email=email,
        streamchaser_id=streamchaser_id,
    )
